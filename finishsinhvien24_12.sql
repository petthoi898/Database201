# Sinh vien

-- (i.3) Tạo view cho yêu cầu dữ liệu từ i3
Drop view if exists Question_Exam_View;
Create View Question_Exam_View as
	SELECT exam.EXAMID, exam.EXAMDATE, exam.SUBJECTID, exam.EXAMLENGTH, exam.TITLE, questionrepresentation.ID AS representid, 
    question.ID AS question_id, question.QUESTIONTEXT, answer.INDEX_ , answer.ANSWERTEXT, generaldescription.DESCRIPTIONTEXT,
    filedescription.FILE, filedescription.FILESOURCE
    FROM exam INNER JOIN use_ ON exam.EXAMID=use_.EXAMID AND exam.EXAMDATE=use_.EXAMDATE
			  INNER JOIN questionrepresentation ON use_.EXAMDATE=questionrepresentation.EXAMDATE
              INNER JOIN question ON questionrepresentation.QUESTIONID=question.ID
              INNER JOIN containb ON question.ID=containb.QUESTIONID
              INNER JOIN generaldescription ON containb.DESCONID=generaldescription.ID
              INNER JOIN answer ON question.ID=answer.QUESTIONID
              INNER JOIN descriptioncontent ON descriptioncontent.ID=generaldescription.DESCONID 
              OR descriptioncontent.ID=question.DESCCONTID 
              OR descriptioncontent.ID=answer.DESCONTID
              INNER JOIN has ON descriptioncontent.ID=has.DESCONID
              INNER JOIN filedescription ON has.FILEDESID=filedescription.ID;
-- XEM DE THI 
DROP PROCEDURE IF EXISTS xemDeThi1MonHoc;
DELIMITER //
-- (i.3). Xem các đề thi của một môn học cho 1 lần thi cụ thể trong 1 học kỳ, ở 1 năm học.
CREATE PROCEDURE xemDeThi1MonHoc(Subject_id	 INT,
                                 ExamTerm           INT,
							     AcademicStartYear  INT,
                                 AcademicEndYear    INT)
	Begin
		SELECT * FROM Question_Exam_View WHERE EXAMDATE IN (SELECT EXAMDATE FROM examtime WHERE SUBJECTID=Subject_id AND TERM=ExamTerm AND STARTYEAR=AcademicStartYear AND ENDYEAR=AcademicEndYear);
	end //
DELIMITER ;
--
-- HAM SO CAU HOI
DROP FUNCTION IF EXISTS SOCAUHOIBAITHI;
DELIMITER $$
CREATE FUNCTION SOCAUHOIBAITHI(
EXAM_ID	INT,
ExamTerm    INT,
AcademicStart  INT,
AcademicEnd   INT
)
	RETURNS INT DETERMINISTIC
    BEGIN
		DECLARE COUNT INT;
        SET COUNT = (SELECT COUNT(*) FROM ANSWERCONTENT WHERE EXAMID = EXAM_ID AND EXAMTERM = (SELECT TERM FROM EXAMTIME WHERE STARTYEAR=ACADAMICSTART AND ENDYEAR = ACADAMICEND));
        RETURN COUNT;
	END $$
DELIMITER ;
#3.1
DROP PROCEDURE IF EXISTS LAMBAI;
DELIMITER $$
CREATE PROCEDURE LAMBAI(
CHOOSE CHAR,
STUDENT_ID INT,
EXAM_ID INT,
QUESTION_ID INT, 
SUBJECT_ID INT
)
BEGIN 
	INSERT INTO CHOOSE (ANSWERCHOOSE, STUDENTID, EXAMID, QUESTIONID, SUBJECTID)
    VALUES (CHOOSE, STUDENT_ID, EXAM_ID, QUESITON_ID, SUBJECT_ID);
END $$
DELIMITER ;
#3.2

DROP PROCEDURE IF EXISTS XEMDETHI;
DELIMITER $$
CREATE PROCEDURE XEMDETHI(
EXTERM INT,
STARTY INT,
EXAM_ID INT
)
BEGIN
	SELECT * FROM QUESTION_EXAM_VIEW WHERE (EXTERM = TERM AND EXAMID = EXAM_ID AND STARTY = STARTYEAR);
END $$

DELIMITER ;

CREATE VIEW CHECKDAPAN AS 
	SELECT ANSWERCHOOSE, STUDENTID, EXAMID, ANSWERCONTENTID, INDEX_, TERM , STARTYEAR, ENDYEAR, CORRECTNESS FROM CHOOSE JOIN ANSWER JOIN EXAMTIME
    WHERE CORRECTNESS = TRUE;
    
-- # 3.3
 DROP PROCEDURE IF EXISTS XEMDAPAN;
 DELIMITER //
 CREATE PROCEDURE XEMDAPAN(Subject_id	 INT,
                                  ExamTerm           INT,
 							     AcademicStartYear  INT,
                                  AcademicEndYear    INT

 )
 	BEGIN
     CREATE VIEW DAPAN AS SELECT ANSWERTEXT, CORRECTNESS, DESCONTID FROM ANSWER JOIN QUESTION ON QUESTIONID =ID JOIN EXAMTIME;
     SELECT * FROM DAPAN WHERE CORRECTNESS = TRUE AND STARTYEAR =ACADAMICSTARTYEAR AND TERM = EXAMTERM AND ENDYEAR = ACADEMICENDYEAR AND SUBJECTID = SUBJECT_ID;
     END//
DELIMITER ;
-- #3.4 xem lai bai lam

DROP PROCEDURE IF EXISTS XEMLAIBAILAM;
DELIMITER //

CREATE procedure XEMLAIBAILAM(
STUDENT_ID int,
EXAM_ID INT,
EXAMTERM INT,
START_ INT,
END_ INT
)
	BEGIN
		SELECT * FROM CHECKDAPAN
        WHERE STUDENT_ID =STUDENTID AND EXAM_ID = EXAMID AND EXAMTERM = TERM AND START_ = STARTYEAR AND END_ = ENDYEAR;
	END //
DELIMITER ;        
#3.5 Xem điểm của mình đối với một đề thi của môn học tại 1 lần thi cụ thể trong một học kỳ, ở một năm học

DROP PROCEDURE IF EXISTS XEMDIEM;
DELIMITER //
CREATE PROCEDURE XEMDIEM(
STUDENT_ID INT,
EXAM_ID INT,
TERM_ INT,
START_YEAR INT,
END_YEAR INT
)
	begin
		DECLARE DIEMSV DECIMAL(4,2) DEFAULT 0;
        SELECT COUNT(ANSWERCHOOSE) AS NUMBERTRUE 
		FROM CHECKDAPAN 
        WHERE ANSWERCHOOSE = INDEX_ AND STUDENTID = STUDENT_ID AND EXAMID = EXAM_ID AND TERM_ = TERM AND START_YEAR = STARTYEAR AND END_YEAR = ENDYEAR AND CORRECTNESS = TRUE;
        
        SET DIEMSV = NUMBERTRUE*0.4;
        INSERT INTO DIEM(STUDENTID, EXAMID, DIEM)
        value (STUDENT_ID , EXAM_ID, DIEMSV);
        SELECT * FROM DIEM WHERE EXAMID = EXAM_ID;
    end //
DELIMITER ;

# 3.6
DROP procedure IF exists XEMDIEMCACMON;
DELIMITER //
CREATE PROCEDURE XEMDIEMCACMON(
STUDENT_ID int
)
	BEGIN
		SELECT * FROM DIEM;
    END //
DELIMITER ;
# 3.7

#3.8
DROP PROCEDURE IF EXISTS GHICHU;
DELIMITER //
CREATE PROCEDURE GHICHU(
NOTE_ VARCHAR(255),
EXAM_ID INT,
STUDENT_ID INT
)
BEGIN
	 UPDATE TAKENOTE
     SET NOTE=NOTE_ WHERE STUDENTID=STUDENT_ID AND EXAMID = EXAM_ID;
END //
DELIMITER ;
